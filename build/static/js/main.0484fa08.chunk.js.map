{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Card/Card.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Card","onClick","clickCount","id","alt","name","src","image","Header","score","highscore","log","console","App","state","photos","gameOver","_this","setState","this","forEach","photo","count","alert","concat","find","o","i","sort","Math","random","_this2","components_Wrapper_Wrapper","components_Header_Header","map","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8lCAKeA,SAFC,SAAAC,GAAK,OAAKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YCS3CC,SARF,SAAAN,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOG,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMS,MACxDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKO,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,YCK9BC,SATA,SAAAd,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAUJ,EAAMK,UAC/BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACaJ,EAAMe,MADnB,eACwCf,EAAMgB,qBCDhDC,SAAMC,QAAQD,KA0DLE,6MAtDbC,MAAQ,CACNC,SACAN,MAAO,EACPC,UAAW,KAGbM,SAAW,WAWT,OAVIC,EAAKH,MAAML,MAAQQ,EAAKH,MAAMJ,WAChCO,EAAKC,SAAS,CAAER,UAAWO,EAAKH,MAAML,OAAS,WAC7CE,EAAIQ,KAAKL,MAAMJ,aAGnBO,EAAKH,MAAMC,OAAOK,QAAQ,SAAAC,GACxBA,EAAMC,MAAQ,IAEhBC,MAAK,0BAAAC,OAA2BP,EAAKH,MAAML,QAC3CQ,EAAKC,SAAS,CAAET,MAAO,KAChB,KAGTP,WAAa,SAAAC,GACXc,EAAKH,MAAMC,OAAOU,KAAK,SAACC,EAAGC,GACzB,GAAID,EAAEvB,KAAOA,EAAI,CACf,GAAwB,IAApBY,EAAOY,GAAGL,MAMZ,OALAP,EAAOY,GAAGL,MAAQP,EAAOY,GAAGL,MAAQ,EACpCL,EAAKC,SAAS,CAAET,MAAOQ,EAAKH,MAAML,MAAQ,GAAK,WAC7CE,EAAIQ,KAAKL,MAAML,SAEjBQ,EAAKH,MAAMC,OAAOa,KAAK,kBAAMC,KAAKC,SAAW,MACtC,EAEPb,EAAKD,uFAMJ,IAAAe,EAAAZ,KACP,OACExB,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAD,CAAQxB,MAAOU,KAAKL,MAAML,MAAOC,UAAWS,KAAKL,MAAMJ,WAAvD,oBACCS,KAAKL,MAAMC,OAAOmB,IAAI,SAAAb,GAAK,OAC1B1B,EAAAC,EAAAC,cAACsC,EAAD,CACEjC,WAAY6B,EAAK7B,WACjBC,GAAIkB,EAAMlB,GACViC,IAAKf,EAAMlB,GACXI,MAAOc,EAAMd,kBAhDP8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0484fa08.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props =>  <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"../Card/Card.css\";\r\n\r\n\r\nconst Card = props => (\r\n    <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;\r\n\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n    <div className = \"header\">\r\n        <div className=\"title\">{ props.children }</div>\r\n        <div className=\"scores\">\r\n            Score: { props.score } Highscore: { props.highscore }\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport photos from \"./photos.json\";\nimport './App.css';\nconst log = console.log;\n\nclass App extends Component {\n\n  state = {\n    photos,\n    score: 0,\n    highscore: 0\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score }, function () {\n        log(this.state.highscore);\n      });\n    }\n    this.state.photos.forEach(photo => {\n      photo.count = 0;\n    });\n    alert(`Game Over :( \\n score: ${this.state.score}`);\n    this.setState({ score: 0 });\n    return true;\n  }\n\n  clickCount = id => {\n    this.state.photos.find((o, i) => {\n      if (o.id === id) {\n        if (photos[i].count === 0) {\n          photos[i].count = photos[i].count + 1;\n          this.setState({ score: this.state.score + 1 }, function () {\n            log(this.state.score);\n          });\n          this.state.photos.sort(() => Math.random() - 0.5)\n          return true;\n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>ClickityClackity</Header>\n        {this.state.photos.map(photo => (\n          <Card\n            clickCount={this.clickCount}\n            id={photo.id}\n            key={photo.id}\n            image={photo.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}